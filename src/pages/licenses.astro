---
import { readFile } from 'node:fs/promises';
import { join as joinPath } from 'node:path';

import FeatureSection from '../components/FeatureSection.astro';
import DefaultLayout from '../layouts/DefaultLayout.astro';

import { getPackageInfo } from 'local-pkg';

const packageLicences: [string, string][] = [];
for (const localPkg of (await getAllLocalPackageNames()) ?? []) {
  const packageInfo = await getPackageInfo(localPkg);

  if (!packageInfo?.rootPath) continue;

  packageLicences.push([
    packageInfo.name,
    (await readLicenceFile(packageInfo.rootPath)) ?? 'No license found.',
  ]);
}

async function getAllLocalPackageNames() {
  try {
    const packageJSON = await import('../../package.json', {
      assert: { type: 'json' },
    });

    return Object.keys(packageJSON.dependencies || {});
  } catch {
    Promise.reject('`package.json` file could not be found.');
  }
}

async function readLicenceFile(rootPath: string) {
  const possibleLicenceFileNames = ['LICENSE', 'LICENCE', 'COPYING'].flatMap(
    (name) => [`${name}.md`, `${name}.txt`, name]
  );

  for (const fileName of possibleLicenceFileNames) {
    const licencePath = joinPath(rootPath, fileName);

    try {
      return await readFile(licencePath, { encoding: 'utf8' });
    } catch (err) {
      // We need to cast `NodeJS.ErrNoException` to access to `code` property.
      // https://github.com/nodejs/node/issues/46869#issuecomment-2111128428
      if ((err as NodeJS.ErrnoException).code !== 'ENOENT') {
        throw err;
      }
    }
  }
}
---

<DefaultLayout title='Licenses | Upryzing'>
  <FeatureSection
    title='Licenses'
    titleId='section-licenses'
    type='centre'
    callout
  />
  <section>
    <dl>
      {
        packageLicences.length === 0 ? (
          <section>
            <p>No licenses found.</p>
          </section>
        ) : (
          <>
            {packageLicences.map(([packageName, licenceContent]) => (
              <dt>{packageName}</dt>
              <dd>
                <pre set:text={licenceContent} />
              </dd>
            ))}
            <section>
              <p>
                This page was autogenerated, if you see any issues, please make
                an issue on our website's repository.
              </p>
            </section>
          </>
        )
      }

      <style>
        section:not([data-callout]) {
          margin: 0 4rem;
        }

        dt::before {
          position: relative;
          content: 'Â·';
          font-size: 2em;
          top: 5px;

          margin-right: 0.5rem;
        }

        dd {
          margin: 1rem;
        }

        pre {
          word-wrap: break-word;
          overflow-wrap: break-word;
          text-wrap: pretty;

          overflow: scroll;
        }
      </style>
    </dl>
  </section>
</DefaultLayout>
